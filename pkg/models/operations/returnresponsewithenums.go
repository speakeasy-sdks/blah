// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/blah/pkg/models/shared"
	"net/http"
)

type ReturnresponsewithenumsResponsewithEnumAttributes struct {
	ExclusiveMaximum bool   `json:"exclusiveMaximum"`
	ExclusiveMinimum bool   `json:"exclusiveMinimum"`
	ID               string `json:"id"`
}

func (o *ReturnresponsewithenumsResponsewithEnumAttributes) GetExclusiveMaximum() bool {
	if o == nil {
		return false
	}
	return o.ExclusiveMaximum
}

func (o *ReturnresponsewithenumsResponsewithEnumAttributes) GetExclusiveMinimum() bool {
	if o == nil {
		return false
	}
	return o.ExclusiveMinimum
}

func (o *ReturnresponsewithenumsResponsewithEnumAttributes) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ReturnresponsewithenumsResponsewithEnumParamFormat string

const (
	ReturnresponsewithenumsResponsewithEnumParamFormatTemplate ReturnresponsewithenumsResponsewithEnumParamFormat = "Template"
	ReturnresponsewithenumsResponsewithEnumParamFormatForm     ReturnresponsewithenumsResponsewithEnumParamFormat = "Form"
	ReturnresponsewithenumsResponsewithEnumParamFormatBody     ReturnresponsewithenumsResponsewithEnumParamFormat = "Body"
	ReturnresponsewithenumsResponsewithEnumParamFormatHeader   ReturnresponsewithenumsResponsewithEnumParamFormat = "Header"
	ReturnresponsewithenumsResponsewithEnumParamFormatQuery    ReturnresponsewithenumsResponsewithEnumParamFormat = "Query"
)

func (e ReturnresponsewithenumsResponsewithEnumParamFormat) ToPointer() *ReturnresponsewithenumsResponsewithEnumParamFormat {
	return &e
}

func (e *ReturnresponsewithenumsResponsewithEnumParamFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Template":
		fallthrough
	case "Form":
		fallthrough
	case "Body":
		fallthrough
	case "Header":
		fallthrough
	case "Query":
		*e = ReturnresponsewithenumsResponsewithEnumParamFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnresponsewithenumsResponsewithEnumParamFormat: %v", v)
	}
}

type ReturnresponsewithenumsResponsewithEnumType string

const (
	ReturnresponsewithenumsResponsewithEnumTypeLong      ReturnresponsewithenumsResponsewithEnumType = "Long"
	ReturnresponsewithenumsResponsewithEnumTypeNumber    ReturnresponsewithenumsResponsewithEnumType = "Number"
	ReturnresponsewithenumsResponsewithEnumTypePrecision ReturnresponsewithenumsResponsewithEnumType = "Precision"
	ReturnresponsewithenumsResponsewithEnumTypeBoolean   ReturnresponsewithenumsResponsewithEnumType = "Boolean"
	ReturnresponsewithenumsResponsewithEnumTypeDateTime  ReturnresponsewithenumsResponsewithEnumType = "DateTime"
	ReturnresponsewithenumsResponsewithEnumTypeDate      ReturnresponsewithenumsResponsewithEnumType = "Date"
	ReturnresponsewithenumsResponsewithEnumTypeString    ReturnresponsewithenumsResponsewithEnumType = "String"
)

func (e ReturnresponsewithenumsResponsewithEnumType) ToPointer() *ReturnresponsewithenumsResponsewithEnumType {
	return &e
}

func (e *ReturnresponsewithenumsResponsewithEnumType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Long":
		fallthrough
	case "Number":
		fallthrough
	case "Precision":
		fallthrough
	case "Boolean":
		fallthrough
	case "DateTime":
		fallthrough
	case "Date":
		fallthrough
	case "String":
		*e = ReturnresponsewithenumsResponsewithEnumType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReturnresponsewithenumsResponsewithEnumType: %v", v)
	}
}

type ReturnresponsewithenumsResponsewithEnum struct {
	Attributes  ReturnresponsewithenumsResponsewithEnumAttributes  `json:"attributes"`
	Constant    bool                                               `json:"constant"`
	Description string                                             `json:"description"`
	ID          string                                             `json:"id"`
	IsArray     bool                                               `json:"isArray"`
	IsAttribute bool                                               `json:"isAttribute"`
	IsMap       bool                                               `json:"isMap"`
	IsStream    bool                                               `json:"isStream"`
	Name        string                                             `json:"name"`
	Nullable    bool                                               `json:"nullable"`
	Optional    bool                                               `json:"optional"`
	ParamFormat ReturnresponsewithenumsResponsewithEnumParamFormat `json:"paramFormat"`
	Type        ReturnresponsewithenumsResponsewithEnumType        `json:"type"`
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetAttributes() ReturnresponsewithenumsResponsewithEnumAttributes {
	if o == nil {
		return ReturnresponsewithenumsResponsewithEnumAttributes{}
	}
	return o.Attributes
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetConstant() bool {
	if o == nil {
		return false
	}
	return o.Constant
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetIsArray() bool {
	if o == nil {
		return false
	}
	return o.IsArray
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetIsAttribute() bool {
	if o == nil {
		return false
	}
	return o.IsAttribute
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetIsMap() bool {
	if o == nil {
		return false
	}
	return o.IsMap
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetIsStream() bool {
	if o == nil {
		return false
	}
	return o.IsStream
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetNullable() bool {
	if o == nil {
		return false
	}
	return o.Nullable
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetOptional() bool {
	if o == nil {
		return false
	}
	return o.Optional
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetParamFormat() ReturnresponsewithenumsResponsewithEnumParamFormat {
	if o == nil {
		return ReturnresponsewithenumsResponsewithEnumParamFormat("")
	}
	return o.ParamFormat
}

func (o *ReturnresponsewithenumsResponsewithEnum) GetType() ReturnresponsewithenumsResponsewithEnumType {
	if o == nil {
		return ReturnresponsewithenumsResponsewithEnumType("")
	}
	return o.Type
}

type ReturnresponsewithenumsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// 500 Global
	GlobalTestException *shared.GlobalTestException
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse      *http.Response
	ResponsewithEnum *ReturnresponsewithenumsResponsewithEnum
}

func (o *ReturnresponsewithenumsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ReturnresponsewithenumsResponse) GetGlobalTestException() *shared.GlobalTestException {
	if o == nil {
		return nil
	}
	return o.GlobalTestException
}

func (o *ReturnresponsewithenumsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ReturnresponsewithenumsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ReturnresponsewithenumsResponse) GetResponsewithEnum() *ReturnresponsewithenumsResponsewithEnum {
	if o == nil {
		return nil
	}
	return o.ResponsewithEnum
}
